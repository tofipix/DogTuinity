From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Mon, 13 Jul 2020 06:22:54 -0700
Subject: [PATCH] Fix AdvancementDataPlayer leak due from quitting early in
 login

Move the criterion storage to the AdvancementDataPlayer object
itself, so the criterion object stores no references - and thus
needs no cleanup.

diff --git a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
index d3387a4e16f81b820d40502d2c46ebb3db88f824..1588d101e0939c883757a5be91b30966d456a6bf 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
@@ -51,6 +51,10 @@ public class AdvancementDataPlayer {
     private Advancement l;
     private boolean m = true;
 
+    // Tuinity start - fix advancement data player leakage
+    final Map<CriterionTriggerAbstract, Set<CriterionTrigger.a>> criterionData = Maps.newIdentityHashMap();
+    // Tuinity end - fix advancement data player leakage
+
     public AdvancementDataPlayer(DataFixer datafixer, PlayerList playerlist, AdvancementDataWorld advancementdataworld, File file, EntityPlayer entityplayer) {
         this.d = datafixer;
         this.e = playerlist;
diff --git a/src/main/java/net/minecraft/server/CriterionTriggerAbstract.java b/src/main/java/net/minecraft/server/CriterionTriggerAbstract.java
index 40b528cef34437655da6abea55d1bde664e0ff70..c61ee03ef5dda0491cf95a081d172bb2d9a606c3 100644
--- a/src/main/java/net/minecraft/server/CriterionTriggerAbstract.java
+++ b/src/main/java/net/minecraft/server/CriterionTriggerAbstract.java
@@ -12,25 +12,25 @@ import java.util.function.Predicate;
 
 public abstract class CriterionTriggerAbstract<T extends CriterionInstanceAbstract> implements CriterionTrigger<T> {
 
-    private final Map<AdvancementDataPlayer, Set<CriterionTrigger.a<T>>> a = Maps.newIdentityHashMap();
+    //private final Map<AdvancementDataPlayer, Set<CriterionTrigger.a<T>>> a = Maps.newIdentityHashMap(); // Tuinity - moved into AdvancementDataPlayer to fix memory leak
 
     public CriterionTriggerAbstract() {}
 
     @Override
     public final void a(AdvancementDataPlayer advancementdataplayer, CriterionTrigger.a<T> criteriontrigger_a) {
-        ((Set) this.a.computeIfAbsent(advancementdataplayer, (advancementdataplayer1) -> {
+        (advancementdataplayer.criterionData.computeIfAbsent(this, (advancementdataplayer1) -> { // Tuinity - fix AdvancementDataPlayer leak
             return Sets.newHashSet();
         })).add(criteriontrigger_a);
     }
 
     @Override
     public final void b(AdvancementDataPlayer advancementdataplayer, CriterionTrigger.a<T> criteriontrigger_a) {
-        Set<CriterionTrigger.a<T>> set = (Set) this.a.get(advancementdataplayer);
+        Set<CriterionTrigger.a<T>> set = (Set) advancementdataplayer.criterionData.get(this); // Tuinity - fix AdvancementDataPlayer leak
 
         if (set != null) {
             set.remove(criteriontrigger_a);
             if (set.isEmpty()) {
-                this.a.remove(advancementdataplayer);
+                advancementdataplayer.criterionData.remove(this); // Tuinity - fix AdvancementDataPlayer leak
             }
         }
 
@@ -38,7 +38,7 @@ public abstract class CriterionTriggerAbstract<T extends CriterionInstanceAbstra
 
     @Override
     public final void a(AdvancementDataPlayer advancementdataplayer) {
-        this.a.remove(advancementdataplayer);
+        advancementdataplayer.criterionData.remove(this); // Tuinity - fix AdvancementDataPlayer leak
     }
 
     protected abstract T b(JsonObject jsonobject, CriterionConditionEntity.b criterionconditionentity_b, LootDeserializationContext lootdeserializationcontext);
@@ -52,7 +52,7 @@ public abstract class CriterionTriggerAbstract<T extends CriterionInstanceAbstra
 
     protected void a(EntityPlayer entityplayer, Predicate<T> predicate) {
         AdvancementDataPlayer advancementdataplayer = entityplayer.getAdvancementData();
-        Set<CriterionTrigger.a<T>> set = (Set) this.a.get(advancementdataplayer);
+        Set<CriterionTrigger.a<T>> set = (Set) advancementdataplayer.criterionData.get(this); // Tuinity - fix AdvancementDataPlayer leak
 
         if (set != null && !set.isEmpty()) {
             LootTableInfo loottableinfo = CriterionConditionEntity.b(entityplayer, entityplayer);
